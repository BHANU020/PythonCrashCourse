you have a directory containing a Python file and a .gitignore
file, you can initialize a Git repository. Open a terminal, navigate to the
git_practice folder, and run the following command:
git_practice$ git init
Initialized empty Git repository in git_practice/.git/
git_practice$
The output shows that Git has initialized an empty repository in
git_practice. A repository is the set of files in a program that Git is actively
tracking. All the files Git uses to manage the repository are located in the
hidden directory .git/, which you won’t need to work with at all. Just don’t
delete that directory, or you’ll lose your project’s history.
508 Appendix D
Checking the Status
Before doing anything else, let’s look at the status of the project:
git_practice$ git status
u # On branch master
#
# Initial commit
#
v # Untracked files:
# (use "git add <file>..." to include in what will be committed)
#
# .gitignore
# hello_world.py
#
w nothing added to commit but untracked files present (use "git add" to track)
git_practice$
In Git, a branch is a version of the project you’re working on; here you
can see that we’re on a branch named master u. Each time you check your
project’s status, it should say that you’re on the branch master. We then see
that we’re about to make the initial commit. A commit is a snapshot of the
project at a particular point in time.
Git informs us that untracked files are in the project v, because we
haven’t told it which files to track yet. Then we’re told that there’s nothing
added to the current commit, but there are untracked files present that we
might want to add to the repository w.
Adding Files to the Repository
Let’s add the two files to the repository, and check the status again:
u git_practice$ git add .
v git_practice$ git status
# On branch master
#
# Initial commit
#
# Changes to be committed:
# (use "git rm --cached <file>..." to unstage)
#
w # new file: .gitignore
# new file: hello_world.py
#
git_practice$
The command git add . adds all files within a project that are not
already being tracked to the repository u. It doesn’t commit the files; it just
tells Git to start paying attention to them. When we check the status of the
Using Git for Version Control 509
project now, we can see that Git recognizes some changes that need to be
committed v. The label new file means these files were newly added to the
repository w.
Making a Commit
Let’s make the first commit:
u git_practice$ git commit -m "Started project."
v [master (root-commit) c03d2a3] Started project.
w 2 files changed, 1 insertion(+)
create mode 100644 .gitignore
create mode 100644 hello_world.py
x git_practice$ git status
# On branch master
nothing to commit, working directory clean
git_practice$
We issue the command git commit -m "message" u to take a snapshot of
the project. The -m flag tells Git to record the message that follows ("Started
project.") in the project’s log. The output shows that we’re on the master
branch v and that two files have changed w.
When we check the status now, we can see that we’re on the master
branch, and we have a clean working directory x. This is the message you
want to see each time you commit a working state of your project. If you
get a different message, read it carefully; it’s likely you forgot to add a file
before making a commit.
Checking the Log
Git keeps a log of all commits made to the project. Let’s check the log:
git_practice$ git log
commit a9d74d87f1aa3b8f5b2688cb586eac1a908cfc7f
Author: Eric Matthes <eric@example.com>
Date: Mon Mar 16 07:23:32 2015 -0800
Started project.
git_practice$
Each time you make a commit, Git generates a unique, 40-character
reference ID. It records who made the commit, when it was made, and the
message recorded. You won’t always need all of this information, so Git provides
an option to print a simpler version of the log entries:
git_practice$ git log --pretty=oneline
a9d74d87f1aa3b8f5b2688cb586eac1a908cfc7f Started project.
git_practice$
510 Appendix D
The --pretty=oneline flag provides the two most important pieces of
information: the reference ID of the commit and the message recorded for
the commit.
The Second Commit
To see the real power of version control, we need to make a change to
the project and commit that change. Here we’ll just add another line to
hello_world.py:
hello_world.py print("Hello Git world!")
print("Hello everyone.")
If we check the status of the project, we’ll see that Git has noticed the
file that changed:
git_practice$ git status
u # On branch master
# Changes not staged for commit:
# (use "git add <file>..." to update what will be committed)
# (use "git checkout -- <file>..." to discard changes in working directory)
#
v # modified: hello_world.py
#
w no changes added to commit (use "git add" and/or "git commit -a")
git_practice$
We see the branch we’re working on u, the name of the file that was
modified v, and that no changes have been committed w. Let’s commit the
change and check the status again:
u git_practice$ git commit -am "Extended greeting."
[master 08d4d5e] Extended greeting.
1 file changed, 1 insertion(+)
v git_practice$ git status
# On branch master
nothing to commit, working directory clean
w git_practice$ git log --pretty=oneline
08d4d5e39cb906f6cff197bd48e9ab32203d7ed6 Extended greeting.
be017b7f06d390261dbc64ff593be6803fd2e3a1 Started project.
git_practice$
We make a new commit, passing the -am flag when we use the command
git commit u. The -a flag tells Git to add all modified files in the repository
to the current commit. (If you create any new files between commits, simply
reissue the git add . command to include the new files in the repository.)
The -m flag tells Git to record a message in the log for this commit.
When we check the status of the project, we see that we once again have
a clean working directory v. Finally, we see the two commits in the log w.
Using Git for Version Control 511
Reverting a Change
Now let’s see how to abandon a change and revert back to the previous
working state. First, add a new line to hello_world.py:
hello_world.py print("Hello Git world!")
print("Hello everyone.")
print("Oh no, I broke the project!")
Save and run this file.
We check the status and see that Git notices this change:
git_practice$ git status
# On branch master
# Changes not staged for commit:
# (use "git add <file>..." to update what will be committed)
# (use "git checkout -- <file>..." to discard changes in working directory)
#
u # modified: hello_world.py
#
no changes added to commit (use "git add" and/or "git commit -a")
git_practice$
Git sees that we modified hello_world.py u, and we can commit the
change if we want to. But this time, instead of committing the change, we
want to revert back to the last commit when we knew our project was working.
We won’t do anything to hello_world.py; we won’t delete the line or use
the Undo feature in the text editor. Instead, enter the following commands
in your terminal session:
git_practice$ git checkout .
git_practice$ git status
# On branch master
nothing to commit, working directory clean
git_practice$
The command git checkout allows you to work with any previous commit.
The command git checkout . abandons any changes made since the last
commit and restores the project to the last committed state.
When you return to your text editor, you’ll see that hello_world.py has
changed back to this:
print("Hello Git world!")
print("Hello everyone.")
Although going back to a previous state may seem trivial in this simple
project, if we were working on a large project with dozens of modified files,
all of the files that had changed since the last commit would be reverted.
This feature is incredibly useful: you can make as many changes as you
512 Appendix D
want when implementing a new feature, and if they don’t work, you can discard
them without harming the project. You don’t have to remember those
changes and manually undo them. Git does all of that for you.
Not e You might have to click in your editor’s window to refresh the file and see the previous
version.
Checking Out Previous Commits
You can check out any commit in your log, not just the most recent, by
including the first six characters of the reference ID instead of a dot. By
checking it out, you can review an earlier commit, and you’re able to then
return to the latest commit or abandon your recent work and pick up development
from the earlier commit:
git_practice$ git log --pretty=oneline
08d4d5e39cb906f6cff197bd48e9ab32203d7ed6 Extended greeting.
be017b7f06d390261dbc64ff593be6803fd2e3a1 Started project.
git_practice$ git checkout be017b
Note: checking out 'be017b'.
u You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.
If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:
git checkout -b new_branch_name
HEAD is now at be017b7... Started project.
git_practice$
When you check out a previous commit, you leave the master branch
and enter what Git refers to as a detached HEAD state u. HEAD is the current
state of the project; we are detached because we’ve left a named branch
(master, in this case).
To get back to the master branch, you check it out:
git_practice$ git checkout master
Previous HEAD position was be017b7... Started project.
Switched to branch 'master'
git_practice$
This brings you back to the master branch. Unless you want to work with
some more advanced features of Git, it’s best not to make any changes to
your project when you’ve checked out an old commit. However, if you’re
Using Git for Version Control 513
the only one working on a project and you want to discard all of the more
recent commits and go back to a previous state, you can reset the project to
a previous commit. Working from the master branch, enter the following:
u git_practice$ git status
# On branch master
nothing to commit, working directory clean
v git_practice$ git log --pretty=oneline
08d4d5e39cb906f6cff197bd48e9ab32203d7ed6 Extended greeting.
be017b7f06d390261dbc64ff593be6803fd2e3a1 Started project.
w git_practice$ git reset --hard be017b
HEAD is now at be017b7 Started project.
x git_practice$ git status
# On branch master
nothing to commit, working directory clean
y git_practice$ git log --pretty=oneline
be017b7f06d390261dbc64ff593be6803fd2e3a1 Started project.
git_practice$
We first check the status to make sure we’re on the master branch u.
When we look at the log, we see both commits v. We then issue the git
reset --hard command with the first six characters of the reference ID of
the commit we want to revert to permanently w. We check the status again
and see we’re on the master branch with nothing to commit x. When we
look at the log again, we see that we’re at the commit we wanted to start
over from y.
Deleting the Repository
Sometimes you’ll mess up your repository’s history and won’t know how to
recover it. If this happens, first consider asking for help using the methods
discussed in Appendix C. If you can’t fix it and you’re working on a solo
project, you can continue working with the files but get rid of the project’s
history by deleting the .git directory. This won’t affect the current state of
any of the files, but it will delete all commits, so you won’t be able to check
out any other states of the project.
To do this, either open a file browser and delete the .git repository or do
it from the command line. Afterwards, you’ll need to start over with a fresh
repository to start tracking your changes again. Here’s what this entire process
looks like in a terminal session:
u git_practice$ git status
# On branch master
nothing to commit, working directory clean
v git_practice$ rm -rf .git
w git_practice$ git status
fatal: Not a git repository (or any of the parent directories): .git
x git_practice$ git init
Initialized empty Git repository in git_practice/.git/
514 Appendix D
y git_practice$ git status
# On branch master
#
# Initial commit
#
# Untracked files:
# (use "git add <file>..." to include in what will be committed)
#
# .gitignore
# hello_world.py
#
nothing added to commit but untracked files present (use "git add" to track)
z git_practice$ git add .
git_practice$ git commit -m "Starting over."
[master (root-commit) 05f5e01] Starting over.
2 files changed, 2 insertions(+)
create mode 100644 .gitignore
create mode 100644 hello_world.py
{ git_practice$ git status
# On branch master
nothing to commit, working directory clean
git_practice$
We first check the status and see that we have a clean working directory
u. Then we use the command rm -rf .git to delete the .git directory
(rmdir /s .git on Windows) v. When we check the status after deleting the
.git folder, we’re told that this is not a Git repository w. All the information
Git uses to track a repository is stored in the .git folder, so removing it
deletes the entire repository.
We’re then free to use git init to start a fresh repository x. Checking
the status shows that we’re back at the initial stage, awaiting the first
commit y. We add the files and make the first commit z. Checking the
status now shows us that we’re on the new master branch with nothing to
commit {.
Using version control takes a bit of practice, but once you start using it
you’ll never want to work without it again.